pipeline {
  agent any

  environment { 
    DOCKER_IMAGE     = 'analyser'
    DOCKERHUB_REPO   = 'adishjain1107/analyser'
    EC2_USER         = 'ubuntu'
    EC2_IP           = '18.209.55.68'
    EC2_SSH_KEY      = credentials('EC2_KEY')
    DOCKERHUB_CREDS  = credentials('dockerhub-credentials')
    REPO_URL         = 'https://github.com/1107-adishjain/Analyser.git'
    REMOTE_DIR       = '/home/ubuntu/analyser'
    COMPOSE_DIR      = 'docker'
    BUILD_NUMBER     = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git url: "${REPO_URL}", branch: 'main'
        echo "üîÑ Code checked out successfully"
      }
    }
    
    stage('Lint Code') {
      steps {
        dir('docker') {
          sh 'npm run lint || echo "Linting completed with warnings"'
        }
        echo "‚úÖ Code linting completed"
      }
    }

    stage('Build Docker Image with Environment Variables') {
      steps {
        withCredentials([
          string(credentialsId: 'supabase-url', variable: 'SUPABASE_URL'),
          string(credentialsId: 'supabase-anon-key', variable: 'SUPABASE_ANON_KEY')
        ]) {
          sh '''
            cd docker
            # Build with environment variables as build arguments
            docker build -f Dockerfile \
              --build-arg NEXT_PUBLIC_SUPABASE_URL="$SUPABASE_URL" \
              --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" \
              -t ${DOCKERHUB_REPO}:${BUILD_NUMBER} ..
            docker tag ${DOCKERHUB_REPO}:${BUILD_NUMBER} ${DOCKERHUB_REPO}:latest
          '''
        }
        echo "üê≥ Docker image built with environment variables successfully"
      }
    }

    stage('Push to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                          usernameVariable: 'DH_USER',
                                          passwordVariable: 'DH_PSW')]) {
          sh '''
            echo "$DH_PSW" | docker login -u "$DH_USER" --password-stdin
            
            # Always push both tags
            echo "üì§ Pushing build-specific image..."
            docker push ${DOCKERHUB_REPO}:${BUILD_NUMBER}
            
            echo "üì§ Pushing latest tag..."
            docker push ${DOCKERHUB_REPO}:latest
            
            docker logout
          '''
        }
        echo "üöÄ Images with environment variables pushed to DockerHub successfully"
      }
    }

    stage('Deploy to EC2') {
      steps {
        sshagent (credentials: ['EC2_KEY']) {
          sh """
            ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} "
              set -e
              echo 'Starting deployment on EC2...'
              
              [ -d '${REMOTE_DIR}' ] || git clone ${REPO_URL} ${REMOTE_DIR}
              
              cd '${REMOTE_DIR}'
              git reset --hard
              git pull origin main
              
              cd '${COMPOSE_DIR}'
              
              # Pull the latest image with embedded environment variables
              docker compose pull
              docker compose down || true
              docker compose up -d
              
              echo 'Deployment completed successfully!'
            "
          """
        }
      }
    }
  }
  
  post {
    always {
      sh '''
        echo "üßπ Cleaning up Jenkins server..."
        docker system prune -f
        docker image prune -a -f
        docker logout || true
      '''
    }
    success {
      echo '‚úÖ Deployment successful!'
    }
    failure {
      echo '‚ùå Deployment failed.'
    }
  }
}
